import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:badges/badges.dart' as badges;
import '../providers/notification_provider.dart';
import '../models/notification_model.dart';
import '../services/overlay_notification_service.dart';
import 'PendingUsersPage.dart';
import 'SupportPage.dart';
import 'accepted_orders_page.dart';

class NotificationsPage extends StatefulWidget {
  const NotificationsPage({super.key});

  @override
  State<NotificationsPage> createState() => _NotificationsPageState();
}

class _NotificationsPageState extends State<NotificationsPage> {
  final ScrollController _scrollController = ScrollController();
  final OverlayNotificationService _overlayService = OverlayNotificationService();

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_onScroll);
    
    // ÿ™ŸáŸäÿ¶ÿ© ÿÆÿØŸÖÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿÆÿßÿ±ÿ¨Ÿäÿ©
    _overlayService.initialize();
    
    // ÿ¨ŸÑÿ® ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿπŸÜÿØ ÿ®ÿØÿ° ÿßŸÑÿµŸÅÿ≠ÿ© ŸÖÿπ ÿπÿ±ÿ∂ loading
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) {
        try {
          final provider = Provider.of<NotificationProvider>(context, listen: false);
          provider.updateUserRole(UserRole.admin);
          // ÿπÿ±ÿ∂ loading ÿ£ÿ´ŸÜÿßÿ° ÿ¨ŸÑÿ® ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™
          provider.fetchNotifications(forceRefresh: true);
          print('üîî Admin notifications page initialized - Loading notifications...');
        } catch (e) {
          print('‚ùå Error initializing notifications page: $e');
        }
      }
    });
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  void _onScroll() {
    if (_scrollController.position.pixels >= _scrollController.position.maxScrollExtent - 200) {
      final provider = Provider.of<NotificationProvider>(context, listen: false);
      if (provider.hasMorePages && !provider.isLoadingMore) {
        provider.loadMoreNotifications();
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Directionality(
      textDirection: TextDirection.rtl,
      child: Scaffold(
        backgroundColor: Colors.white,
        appBar: _buildAppBar(),
        body: Consumer<NotificationProvider>(
          builder: (context, provider, child) {
            return RefreshIndicator(
              onRefresh: () => provider.fetchNotifications(forceRefresh: true),
              child: _buildBody(provider),
            );
          },
        ),
        floatingActionButton: _buildFloatingActionButton(),
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      backgroundColor: Colors.blue,
      iconTheme: const IconThemeData(color: Colors.white),
      title: Row(
        children: [
          const Text(
            'ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ£ÿØŸÖŸÜ',
            style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
          ),
          const Spacer(),
          Consumer<NotificationProvider>(
            builder: (context, provider, child) {
              if (provider.unreadCount > 0) {
                return badges.Badge(
                  badgeContent: Text(
                    provider.unreadCount.toString(),
                    style: const TextStyle(color: Colors.white, fontSize: 12),
                  ),
                  badgeStyle: const badges.BadgeStyle(
                    badgeColor: Colors.red,
                  ),
                  child: const Icon(Icons.notifications, color: Colors.white),
                );
              }
              return const Icon(Icons.notifications, color: Colors.white);
            },
          ),
        ],
      ),
      centerTitle: false,
      elevation: 0,
      actions: [
        PopupMenuButton<String>(
          icon: const Icon(Icons.more_vert, color: Colors.white),
          onSelected: _handleMenuAction,
          itemBuilder: (context) => [
            const PopupMenuItem(
              value: 'mark_all_read',
              child: Row(
                children: [
                  Icon(Icons.done_all, color: Colors.blue),
                  SizedBox(width: 8),
                  Text('ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑŸÉŸÑ ŸÉŸÖŸÇÿ±Ÿàÿ°'),
                ],
              ),
            ),
            const PopupMenuItem(
              value: 'refresh',
              child: Row(
                children: [
                  Icon(Icons.refresh, color: Colors.green),
                  SizedBox(width: 8),
                  Text('ÿ™ÿ≠ÿØŸäÿ´'),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildBody(NotificationProvider provider) {
    if (provider.isLoading && provider.notifications.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text('ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™...'),
          ],
        ),
      );
    }

    if (provider.error != null && provider.notifications.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.error, color: Colors.red, size: 64),
            const SizedBox(height: 16),
            const Text(
              'ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            Text(
              provider.error!,
              textAlign: TextAlign.center,
              style: const TextStyle(color: Colors.grey),
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: () => provider.fetchNotifications(forceRefresh: true),
              icon: const Icon(Icons.refresh),
              label: const Text('ÿ•ÿπÿßÿØÿ© ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ©'),
            ),
          ],
        ),
      );
    }

    if (provider.notifications.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.notifications_none, size: 64, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              'ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™',
              style: TextStyle(fontSize: 18, color: Colors.grey),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      controller: _scrollController,
      padding: const EdgeInsets.all(16),
      itemCount: provider.notifications.length + (provider.isLoadingMore ? 1 : 0),
      itemBuilder: (context, index) {
        if (index == provider.notifications.length) {
          return const Center(
            child: Padding(
              padding: EdgeInsets.all(16),
              child: CircularProgressIndicator(),
            ),
          );
        }

        final notification = provider.notifications[index];
        return _buildNotificationCard(notification, provider);
      },
    );
  }

  Widget _buildNotificationCard(NotificationModel notification, NotificationProvider provider) {
    return Dismissible(
      key: Key('notification_${notification.id}'),
      direction: DismissDirection.horizontal,
      onDismissed: (direction) {
        provider.deleteNotification(notification.id);
        _overlayService.showInfoNotification(
          'ÿ™ŸÖ ÿßŸÑÿ≠ÿ∞ŸÅ',
          'ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ÿ®ŸÜÿ¨ÿßÿ≠',
        );
      },
      background: Container(
        alignment: Alignment.centerRight,
        padding: const EdgeInsets.symmetric(horizontal: 20),
        color: Colors.red,
        child: const Icon(Icons.delete, color: Colors.white),
      ),
      secondaryBackground: Container(
        alignment: Alignment.centerLeft,
        padding: const EdgeInsets.symmetric(horizontal: 20),
        color: Colors.red,
        child: const Icon(Icons.delete, color: Colors.white),
      ),
      child: Card(
        elevation: notification.isRead ? 1 : 3,
        margin: const EdgeInsets.only(bottom: 12),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
          side: BorderSide(
            color: notification.isRead ? Colors.grey.shade300 : Colors.blue.shade300,
            width: notification.isRead ? 0.5 : 1.5,
          ),
        ),
        color: notification.isRead ? Colors.white : Colors.blue.shade50,
        child: InkWell(
          onTap: () => _handleNotificationTap(notification, provider),
          borderRadius: BorderRadius.circular(12),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Row(
              children: [
                // ŸÖÿ§ÿ¥ÿ± ÿπÿØŸÖ ÿßŸÑŸÇÿ±ÿßÿ°ÿ©
                if (!notification.isRead)
                  Container(
                    width: 8,
                    height: 8,
                    decoration: const BoxDecoration(
                      color: Colors.blue,
                      shape: BoxShape.circle,
                    ),
                  ),
                if (!notification.isRead) const SizedBox(width: 12),
                
                // ÿ£ŸäŸÇŸàŸÜÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: _getNotificationColor(notification.type).withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Icon(
                    _getNotificationIcon(notification.type),
                    color: _getNotificationColor(notification.type),
                    size: 24,
                  ),
                ),
                const SizedBox(width: 16),
                
                // ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        notification.title,
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: notification.isRead ? FontWeight.normal : FontWeight.bold,
                          color: Colors.black87,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                      const SizedBox(height: 4),
                      Text(
                        notification.message,
                        style: const TextStyle(
                          fontSize: 14,
                          color: Colors.black54,
                        ),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                      const SizedBox(height: 4),
                      Text(
                        notification.timeAgo,
                        style: const TextStyle(
                          fontSize: 12,
                          color: Colors.grey,
                        ),
                      ),
                    ],
                  ),
                ),
                
                // ÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™
                if (_hasActions(notification.type))
                  _buildActionButtons(notification, provider),
                
                const Icon(
                  Icons.arrow_forward_ios,
                  size: 16,
                  color: Colors.grey,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildActionButtons(NotificationModel notification, NotificationProvider provider) {
    // ÿ•ÿ≤ÿßŸÑÿ© ÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑÿµÿ≠ ŸàÿßŸÑÿ∫ŸÑÿ∑ - ÿ≥Ÿäÿ™ŸÖ ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿπÿ®ÿ± ÿßŸÑÿ∂ÿ∫ÿ∑ ÿπŸÑŸäŸáÿß
    return const SizedBox.shrink();
  }

  Widget _buildFloatingActionButton() {
    return Consumer<NotificationProvider>(
      builder: (context, provider, child) {
        if (provider.unreadCount == 0) return const SizedBox.shrink();
        
        return FloatingActionButton.extended(
          onPressed: () => _markAllAsRead(provider),
          backgroundColor: Colors.blue,
          icon: const Icon(Icons.done_all, color: Colors.white),
          label: Text(
            'ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑŸÉŸÑ ŸÉŸÖŸÇÿ±Ÿàÿ° (${provider.unreadCount})',
            style: const TextStyle(color: Colors.white),
          ),
        );
      },
    );
  }

  /// ŸÖÿπÿßŸÑÿ¨ÿ© ÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™ ÿßŸÑŸÇÿßÿ¶ŸÖÿ©
  void _handleMenuAction(String action) {
    final provider = Provider.of<NotificationProvider>(context, listen: false);
    
    switch (action) {
      case 'mark_all_read':
        _markAllAsRead(provider);
        break;
      case 'refresh':
        provider.fetchNotifications(forceRefresh: true);
        break;
    }
  }

  /// ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑŸÜŸÇÿ± ÿπŸÑŸâ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
  void _handleNotificationTap(NotificationModel notification, NotificationProvider provider) {
    // ÿ∑ÿ®ÿßÿπÿ© ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ŸÑŸÑÿ™ÿ¥ÿÆŸäÿµ
    print('üîç DEBUG: Notification tapped!');
    print('üîç DEBUG: notification.type = "${notification.type}"');
    print('üîç DEBUG: notification.title = "${notification.title}"');
    print('üîç DEBUG: notification.message = "${notification.message}"');
    print('üîç DEBUG: notification.id = ${notification.id}');
    print('üîç DEBUG: notification.data = ${notification.data}');
    print('üîç DEBUG: notification.notifiableType = "${notification.notifiableType}"');
    print('üîç DEBUG: notification.notifiableId = ${notification.notifiableId}');
    
    // ŸÅÿ≠ÿµ ÿ•ÿ∂ÿßŸÅŸä ŸÑŸÑÿ™ÿ¥ÿÆŸäÿµ
    print('üîç DEBUG: Is order notification? ${_isOrderNotification(notification)}');
    print('üîç DEBUG: Is user registration? ${_isUserRegistrationNotification(notification)}');
    
    // ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ŸÉŸÖŸÇÿ±Ÿàÿ°
    if (!notification.isRead) {
      provider.markAsRead(notification.id);
    }

    // ÿßŸÑÿ™ŸÜŸÇŸÑ ÿ≠ÿ≥ÿ® ŸÜŸàÿπ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
    switch (notification.type) {
      case 'user_registered':
        // ÿßŸÑÿßŸÜÿ™ŸÇÿßŸÑ ŸÑÿµŸÅÿ≠ÿ© ÿ∑ŸÑÿ®ÿßÿ™ ŸÅÿ™ÿ≠ ÿßŸÑÿ≠ÿ≥ÿßÿ®
        print('‚úÖ SUCCESS: Matched user_registered case!');
        print('üîÑ Navigating to PendingUsersPage for user_registered notification');
        
        // ÿπÿ±ÿ∂ ÿ±ÿ≥ÿßŸÑÿ© ÿ™ÿ£ŸÉŸäÿØ ŸÇÿµŸäÿ±ÿ©
        _overlayService.showInfoNotification(
          'ÿßŸÜÿ™ŸÇÿßŸÑ',
          'ÿ¨ÿßÿ±Ÿä ŸÅÿ™ÿ≠ ÿµŸÅÿ≠ÿ© ÿ∑ŸÑÿ®ÿßÿ™ ŸÅÿ™ÿ≠ ÿßŸÑÿ≠ÿ≥ÿßÿ®...',
        );
        
        // ÿßŸÑÿ™ŸÜŸÇŸÑ ŸÑÿµŸÅÿ≠ÿ© PendingUsersPage
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => const PendingUsersPage(),
          ),
        );
        
        print('‚úÖ Navigation completed to PendingUsersPage');
        return; // ÿ•ŸÜŸáÿßÿ° ÿßŸÑÿØÿßŸÑÿ© ŸáŸÜÿß ŸÑÿ∂ŸÖÿßŸÜ ÿπÿØŸÖ ÿ™ŸÜŸÅŸäÿ∞ ÿ£Ÿä ŸÉŸàÿØ ÿ¢ÿÆÿ±
      case 'complaint':
      case 'support_message':
        // ÿßŸÑÿßŸÜÿ™ŸÇÿßŸÑ ŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿØÿπŸÖ ÿßŸÑŸÅŸÜŸä ŸàÿßŸÑÿ¥ŸÉÿßŸàŸä
        print('üîÑ Navigating to SupportPage for complaint/support notification');
        
        // ÿπÿ±ÿ∂ ÿ±ÿ≥ÿßŸÑÿ© ÿ™ÿ£ŸÉŸäÿØ ŸÇÿµŸäÿ±ÿ©
        _overlayService.showInfoNotification(
          'ÿßŸÜÿ™ŸÇÿßŸÑ',
          'ÿ¨ÿßÿ±Ÿä ŸÅÿ™ÿ≠ ÿµŸÅÿ≠ÿ© ÿßŸÑÿØÿπŸÖ ÿßŸÑŸÅŸÜŸä ŸàÿßŸÑÿ¥ŸÉÿßŸàŸä...',
        );
        
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => const SupportPage(),
          ),
        );
        return; // ÿ•ŸÜŸáÿßÿ° ÿßŸÑÿØÿßŸÑÿ© ŸáŸÜÿß
      case 'order_created':
      case 'order_accepted':
      case 'order_delivered':
      case 'order_cancelled':
      case 'new_order':
      case 'order_status_updated':
      case 'delivery_completed':
      case 'order_update':
        // ÿßŸÑÿßŸÜÿ™ŸÇÿßŸÑ ŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ¨ÿßÿ±Ÿäÿ©
        print('üì¶ Order notification tapped: ${notification.type}');
        print('üîÑ Navigating to AcceptedOrdersPage for order notification');
        
        // ÿπÿ±ÿ∂ ÿ±ÿ≥ÿßŸÑÿ© ÿ™ÿ£ŸÉŸäÿØ ŸÇÿµŸäÿ±ÿ©
        _overlayService.showInfoNotification(
          'ÿßŸÜÿ™ŸÇÿßŸÑ',
          'ÿ¨ÿßÿ±Ÿä ŸÅÿ™ÿ≠ ÿµŸÅÿ≠ÿ© ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ¨ÿßÿ±Ÿäÿ©...',
        );
        
        // ÿßŸÑÿ™ŸÜŸÇŸÑ ŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ¨ÿßÿ±Ÿäÿ©
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => const AcceptedOrdersPage(),
          ),
        );
        
        print('‚úÖ Navigation completed to AcceptedOrdersPage');
        return; // ÿ•ŸÜŸáÿßÿ° ÿßŸÑÿØÿßŸÑÿ© ŸáŸÜÿß ŸÑÿ∂ŸÖÿßŸÜ ÿπÿØŸÖ ÿ™ŸÜŸÅŸäÿ∞ ÿ£Ÿä ŸÉŸàÿØ ÿ¢ÿÆÿ±
      case 'general':
        // ŸÅÿ≠ÿµ ÿ•ÿ∂ÿßŸÅŸä ŸÑŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿπÿßŸÖÿ© - ŸÖŸÖŸÉŸÜ ÿ™ŸÉŸàŸÜ ÿ∑ŸÑÿ®ÿßÿ™ ÿ£Ÿà ŸÅÿ™ÿ≠ ÿ≠ÿ≥ÿßÿ®
        print('üîç General notification - checking title and message');
        
        // ŸÅÿ≠ÿµ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿ•ÿ¥ÿπÿßÿ± ŸÖÿ™ÿπŸÑŸÇ ÿ®ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿ£ŸàŸÑÿßŸã (ŸÑŸá ÿßŸÑÿ£ŸàŸÑŸàŸäÿ©)
        if (_isOrderNotification(notification)) {
          print('‚úÖ Found order-related notification in general - navigating to AcceptedOrdersPage');
          _overlayService.showInfoNotification(
            'ÿßŸÜÿ™ŸÇÿßŸÑ',
            'ÿ¨ÿßÿ±Ÿä ŸÅÿ™ÿ≠ ÿµŸÅÿ≠ÿ© ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ¨ÿßÿ±Ÿäÿ©...',
          );
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const AcceptedOrdersPage(),
            ),
          );
          return;
        }
        
        // ŸÅÿ≠ÿµ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿ•ÿ¥ÿπÿßÿ± ŸÅÿ™ÿ≠ ÿ≠ÿ≥ÿßÿ®
        else if (_isUserRegistrationNotification(notification)) {
          print('‚úÖ Found user registration in general notification - navigating to PendingUsersPage');
          _overlayService.showInfoNotification(
            'ÿßŸÜÿ™ŸÇÿßŸÑ',
            'ÿ¨ÿßÿ±Ÿä ŸÅÿ™ÿ≠ ÿµŸÅÿ≠ÿ© ÿ∑ŸÑÿ®ÿßÿ™ ŸÅÿ™ÿ≠ ÿßŸÑÿ≠ÿ≥ÿßÿ®...',
          );
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const PendingUsersPage(),
            ),
          );
          return;
        }
        
        // ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ÿ£Ÿä ŸÖŸÜ ÿßŸÑÿ≥ÿßÿ®ŸÇÿå ÿπÿ±ÿ∂ ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
        else {
          print('‚ÑπÔ∏è General notification - showing details');
          _showNotificationDetails(notification);
        }
        break;
      default:
        // ŸÅÿ≠ÿµ ÿ•ÿ∂ÿßŸÅŸä ŸÑÿ£Ÿä ŸÜŸàÿπ ÿ•ÿ¥ÿπÿßÿ± - ŸÖŸÖŸÉŸÜ ŸäŸÉŸàŸÜ ÿ∑ŸÑÿ® ŸÅÿ™ÿ≠ ÿ≠ÿ≥ÿßÿ® ÿ£Ÿà ÿ∑ŸÑÿ®
        print('‚ÑπÔ∏è Unknown notification type: ${notification.type} - checking content');
        
        // ŸÅÿ≠ÿµ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿ•ÿ¥ÿπÿßÿ± ŸÖÿ™ÿπŸÑŸÇ ÿ®ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿ£ŸàŸÑÿßŸã (ŸÑŸá ÿßŸÑÿ£ŸàŸÑŸàŸäÿ©)
        if (_isOrderNotification(notification)) {
          print('‚úÖ Found order-related notification - navigating to AcceptedOrdersPage');
          _overlayService.showInfoNotification(
            'ÿßŸÜÿ™ŸÇÿßŸÑ',
            'ÿ¨ÿßÿ±Ÿä ŸÅÿ™ÿ≠ ÿµŸÅÿ≠ÿ© ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ¨ÿßÿ±Ÿäÿ©...',
          );
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const AcceptedOrdersPage(),
            ),
          );
          return;
        }
        
        // ŸÅÿ≠ÿµ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿ•ÿ¥ÿπÿßÿ± ÿ∑ŸÑÿ® ŸÅÿ™ÿ≠ ÿ≠ÿ≥ÿßÿ® (ÿ®ÿπÿØ ÿßŸÑÿ™ÿ£ŸÉÿØ ÿ£ŸÜŸá ŸÑŸäÿ≥ ÿ∑ŸÑÿ® ÿ™ŸàÿµŸäŸÑ)
        else if (_isUserRegistrationNotification(notification)) {
          print('‚úÖ Found user registration in unknown notification type - navigating to PendingUsersPage');
          _overlayService.showInfoNotification(
            'ÿßŸÜÿ™ŸÇÿßŸÑ',
            'ÿ¨ÿßÿ±Ÿä ŸÅÿ™ÿ≠ ÿµŸÅÿ≠ÿ© ÿ∑ŸÑÿ®ÿßÿ™ ŸÅÿ™ÿ≠ ÿßŸÑÿ≠ÿ≥ÿßÿ®...',
          );
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const PendingUsersPage(),
            ),
          );
          return;
        }
        
        // ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ÿ£Ÿä ŸÖŸÜ ÿßŸÑÿ≥ÿßÿ®ŸÇÿå ÿπÿ±ÿ∂ ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
        else {
          print('‚ÑπÔ∏è Showing details for notification type: ${notification.type}');
          _showNotificationDetails(notification);
        }
        break;
    }
  }

  /// ŸÅÿ≠ÿµ ÿ•ÿ∂ÿßŸÅŸä ŸÑŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ŸÑŸÖÿπÿ±ŸÅÿ© ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ŸÖÿ™ÿπŸÑŸÇÿ© ÿ®ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™
  bool _isOrderNotification(NotificationModel notification) {
    final title = notification.title.toLowerCase();
    final message = notification.message.toLowerCase();
    
    // ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸä ÿßŸÑÿπŸÜŸàÿßŸÜ ŸàÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿπŸÜ ŸÉŸÑŸÖÿßÿ™ ŸÖŸÅÿ™ÿßÿ≠Ÿäÿ© ŸÑŸÑÿ∑ŸÑÿ®ÿßÿ™
    final orderKeywords = [
      'ÿ∑ŸÑÿ®',
      'ÿ™ŸàÿµŸäŸÑ',
      'ÿ™ÿ≥ŸÑŸäŸÖ',
      'ŸÇÿ®ŸàŸÑ',
      'ÿ±ŸÅÿ∂',
      'ÿ•ŸÑÿ∫ÿßÿ°',
      'order',
      'delivery',
      'accept',
      'reject',
      'cancel',
      'delivered',
      'created',
      'ÿ™ŸÖ ŸÇÿ®ŸàŸÑ',
      'ÿ™ŸÖ ÿ±ŸÅÿ∂',
      'ÿ™ŸÖ ÿßŸÑÿ™ÿ≥ŸÑŸäŸÖ',
      'ÿ™ŸÖ ÿßŸÑÿ™ŸàÿµŸäŸÑ',
      'ÿ∑ŸÑÿ® ÿ¨ÿØŸäÿØ',
      'ÿ∑ŸÑÿ® ÿ™ŸàÿµŸäŸÑ',
      'new order',
      'order accepted',
      'order delivered',
      'order cancelled',
      'delivery completed',
      'order status',
      'ÿ≠ÿßŸÑÿ© ÿßŸÑÿ∑ŸÑÿ®',
      'ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ∑ŸÑÿ®',
      'order update',
      'ÿ®ŸÜÿ¨ÿßÿ≠',
      'successfully'
    ];
    
    for (String keyword in orderKeywords) {
      if (title.contains(keyword) || message.contains(keyword)) {
        print('üîç Found order keyword "$keyword" in notification');
        return true;
      }
    }
    
    // ŸÅÿ≠ÿµ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ŸÖŸàÿ¨ŸàÿØÿ©
    if (notification.data != null) {
      final dataString = notification.data.toString().toLowerCase();
      
      // ŸÅÿ≠ÿµ ÿßŸÑŸÉŸÑŸÖÿßÿ™ ÿßŸÑŸÖŸÅÿ™ÿßÿ≠Ÿäÿ© ŸÅŸä ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
      for (String keyword in orderKeywords) {
        if (dataString.contains(keyword)) {
          print('üîç Found order keyword "$keyword" in notification data');
          return true;
        }
      }
      
      // ŸÅÿ≠ÿµ ÿ•ÿ∂ÿßŸÅŸä: ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ≠ŸÇŸàŸÑ ÿ∑ŸÑÿ®
      final data = notification.data!;
      if (data.containsKey('order_id') || 
          data.containsKey('delivery_fee') || 
          data.containsKey('customer_name') ||
          data.containsKey('delivery_address') ||
          data.containsKey('order_status')) {
        print('üîç Found order data fields in notification - likely order notification');
        return true;
      }
    }
    
    return false;
  }

  /// ŸÅÿ≠ÿµ ÿ•ÿ∂ÿßŸÅŸä ŸÑŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿπÿßŸÖÿ© ŸÑŸÖÿπÿ±ŸÅÿ© ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿ∑ŸÑÿ®ÿßÿ™ ŸÅÿ™ÿ≠ ÿ≠ÿ≥ÿßÿ®
  bool _isUserRegistrationNotification(NotificationModel notification) {
    final title = notification.title.toLowerCase();
    final message = notification.message.toLowerCase();
    
    // ÿ£ŸàŸÑÿßŸã: ÿßŸÑÿ™ÿ£ŸÉÿØ ÿ£ŸÜŸá ŸÑŸäÿ≥ ÿ•ÿ¥ÿπÿßÿ± ÿ∑ŸÑÿ® ÿ™ŸàÿµŸäŸÑ
    final orderExclusions = [
      'ÿ™ŸÖ ŸÇÿ®ŸàŸÑ',
      'ÿ™ŸÖ ÿ™ŸàÿµŸäŸÑ',
      'ÿ™ŸÖ ÿ™ÿ≥ŸÑŸäŸÖ',
      'ÿ™ŸÖ ÿ•ŸÑÿ∫ÿßÿ°',
      'ÿ∑ŸÑÿ® ÿ™ŸàÿµŸäŸÑ',
      'order accepted',
      'order delivered',
      'order cancelled',
      'delivery',
      'ÿ™ŸàÿµŸäŸÑ',
      'ÿ™ÿ≥ŸÑŸäŸÖ'
    ];
    
    for (String exclusion in orderExclusions) {
      if (title.contains(exclusion) || message.contains(exclusion)) {
        print('üîç Found order exclusion keyword "$exclusion" - not user registration');
        return false;
      }
    }
    
    // ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸä ÿßŸÑÿπŸÜŸàÿßŸÜ ŸàÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿπŸÜ ŸÉŸÑŸÖÿßÿ™ ŸÖŸÅÿ™ÿßÿ≠Ÿäÿ© ŸÑÿ∑ŸÑÿ®ÿßÿ™ ŸÅÿ™ÿ≠ ÿßŸÑÿ≠ÿ≥ÿßÿ®
    final keywords = [
      'ÿ™ÿ≥ÿ¨ŸäŸÑ',
      'ÿ≠ÿ≥ÿßÿ® ÿ¨ÿØŸäÿØ',
      'ŸÅÿ™ÿ≠ ÿ≠ÿ≥ÿßÿ®',
      'ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ¨ÿØŸäÿØ',
      'ÿ∑ŸÑÿ® ŸÅÿ™ÿ≠ ÿ≠ÿ≥ÿßÿ®',
      'register',
      'new account',
      'account registration',
      'new user',
      'signup',
      'user registration',
      'pending user'
    ];
    
    for (String keyword in keywords) {
      if (title.contains(keyword) || message.contains(keyword)) {
        print('üîç Found user registration keyword "$keyword" in notification');
        return true;
      }
    }
    
    // ŸÅÿ≠ÿµ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ŸÖŸàÿ¨ŸàÿØÿ©
    if (notification.data != null) {
      final dataString = notification.data.toString().toLowerCase();
      
      // ŸÅÿ≠ÿµ ÿßŸÑŸÉŸÑŸÖÿßÿ™ ÿßŸÑŸÖŸÅÿ™ÿßÿ≠Ÿäÿ© ŸÅŸä ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
      for (String keyword in keywords) {
        if (dataString.contains(keyword)) {
          print('üîç Found keyword "$keyword" in notification data');
          return true;
        }
      }
      
      // ŸÅÿ≠ÿµ ÿ•ÿ∂ÿßŸÅŸä: ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ≠ŸÇŸàŸÑ ŸÖÿ≥ÿ™ÿÆÿØŸÖ (ŸàŸÑŸäÿ≥ ÿ∑ŸÑÿ®)
      final data = notification.data!;
      
      // ÿ™ÿ£ŸÉÿØ ÿ£ŸÜŸá ŸÑŸäÿ≥ ÿ∑ŸÑÿ® ÿ™ŸàÿµŸäŸÑ ÿ£ŸàŸÑÿßŸã
      if (data.containsKey('order_id') || 
          data.containsKey('delivery_fee') || 
          data.containsKey('customer_name') ||
          data.containsKey('delivery_address') ||
          data.containsKey('order_status')) {
        print('üîç Found order data fields - not user registration');
        return false;
      }
      
      // ŸÅÿ≠ÿµ ÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÅŸÇÿ∑ ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ŸÉŸÜ ŸáŸÜÿßŸÉ ÿ≠ŸÇŸàŸÑ ÿ∑ŸÑÿ®
      if (data.containsKey('role') ||
          data.containsKey('is_approved') ||
          (data.containsKey('email') && !data.containsKey('customer_name'))) {
        print('üîç Found user registration data fields in notification');
        return true;
      }
    }
    
    return false;
  }

  /// ŸÅÿ≠ÿµ ŸÖÿß ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± Ÿäÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™
  bool _hasActions(String type) {
    return false; // ÿ•ÿ≤ÿßŸÑÿ© ÿ¨ŸÖŸäÿπ ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™ ÿßŸÑŸÖÿ®ÿßÿ¥ÿ±ÿ©
  }


  /// ÿ™ÿ≠ÿØŸäÿØ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ŸÉŸÖŸÇÿ±Ÿàÿ°ÿ©
  Future<void> _markAllAsRead(NotificationProvider provider) async {
    try {
      final success = await provider.markAllAsRead();
      
      if (success) {
        _overlayService.showSuccessNotification(
          'ÿ™ŸÖ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´',
          'ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ŸÉŸÖŸÇÿ±Ÿàÿ°ÿ©',
        );
      } else {
        _overlayService.showErrorNotification(
          'ÿÆÿ∑ÿ£',
          'ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ŸÉŸÖŸÇÿ±Ÿàÿ°ÿ©',
        );
      }
    } catch (e) {
      _overlayService.showErrorNotification(
        'ÿÆÿ∑ÿ£',
        'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ™ÿ≠ÿØŸäÿ´: $e',
      );
    }
  }


  /// ÿπÿ±ÿ∂ ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
  void _showNotificationDetails(NotificationModel notification) {
    print('üö® DEBUG: _showNotificationDetails called for type: ${notification.type}');
    showDialog(
      context: context,
      builder: (context) => Directionality(
        textDirection: TextDirection.rtl,
        child: AlertDialog(
          title: Text(notification.title),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(notification.message),
              const SizedBox(height: 16),
              Text(
                'ÿßŸÑŸàŸÇÿ™: ${notification.timeAgo}',
                style: const TextStyle(color: Colors.grey, fontSize: 12),
              ),
              if (notification.data != null) ...[
                const SizedBox(height: 16),
                const Text('ÿ™ŸÅÿßÿµŸäŸÑ ÿ•ÿ∂ÿßŸÅŸäÿ©:', style: TextStyle(fontWeight: FontWeight.bold)),
                const SizedBox(height: 8),
                Text(notification.data.toString()),
              ],
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('ÿ•ÿ∫ŸÑÿßŸÇ'),
            ),
          ],
        ),
      ),
    );
  }

  /// ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿ£ŸäŸÇŸàŸÜÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
  IconData _getNotificationIcon(String type) {
    switch (type) {
      case 'user_registered':
        return Icons.person_add;
      case 'complaint':
        return Icons.report_problem;
      case 'support_message':
        return Icons.support_agent;
      case 'order_created':
        return Icons.delivery_dining;
      case 'order_accepted':
        return Icons.check_circle;
      case 'order_delivered':
        return Icons.done_all;
      case 'order_cancelled':
        return Icons.cancel;
      default:
        return Icons.notifications;
    }
  }

  /// ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÑŸàŸÜ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
  Color _getNotificationColor(String type) {
    switch (type) {
      case 'user_registered':
        return Colors.blue;
      case 'complaint':
        return Colors.orange;
      case 'support_message':
        return Colors.indigo;
      case 'order_created':
        return Colors.green;
      case 'order_accepted':
        return Colors.teal;
      case 'order_delivered':
        return Colors.purple;
      case 'order_cancelled':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }
}
